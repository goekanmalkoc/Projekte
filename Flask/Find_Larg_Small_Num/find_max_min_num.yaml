AWSTemplateFormatVersion: 2010-09-09
Description: |
  CloudFormation Template for Find the largest and smallest Application. 
  This template creates Python Flask Web Application on Amazon Linux 3 AMI
  (latest ami) EC2 Instance with custom security group 
  allowing http connections on port 80 and SSH connection on port 22. 
  Find the largest and smallest Application is downloaded from Github 
  repository, then installed on Flask.
  
Parameters:
  KeypairId:
    Description: Select your keypair
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: "Must be an existing EC2 KeyPair."

  LatestAmiId:
    Description: Select your AMI
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  InstanceType:
    Description: "EC2 Instance Type"
    Type: String
    Default: "t2.micro"
    AllowedValues: 
      - t2.micro
      - t2.small
      - t2.medium
      - t3.micro
      - t3.small
      - t3.medium
    ConstraintDescription: "Must be a valid EC2 instance type."

    SecurityGroupPN:
      Description: "SecurityGroup secmelisiniz"
      Type: List<AWS::EC2::SecurityGroup::Id>
      ConstraintDescription: "Must be an existing EC2 Securty Group" 

Resources:
  WebServerHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeypairId
      SecurityGroupIds: 
        - !Select [0, !Ref SecurityGroupPN]
      Tags: 
        - Key: Name
          Value: !Sub Web Server of ${AWS::StackName}
      UserData: 
       !Base64 |
        #! /bin/bash
        dnf update -y
        dnf install -y python3 python3-pip git

        pip3 install virtualenv
        virtualenv venv
        source venv/bin/activate

        pip install Flask

        git clone https://github.com/goekanmalkoc/Projekte.git /home/ec2-user/my_flask_app
        cd /home/ec2-user/my_flask_app/flask-_01_02_Jinja_Template/neu_projeckt

  
Outputs:
  WebSiteURL:
    Value: !Sub 
     - http://${WebSiteURL}
     - WebSiteURL: !GetAtt WebServerHost.PublicDnsName

  PrivateIp:
    Value: !Sub 
     - Private Ip of instance is ${Privateip}
     - Privateip: !GetAtt WebServerHost.PrivateIp